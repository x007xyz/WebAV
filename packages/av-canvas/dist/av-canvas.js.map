{"version":3,"file":"av-canvas.js","sources":["../src/types.ts","../src/utils.ts","../src/sprites/sprite-manager.ts","../src/sprites/render-ctrl.ts","../src/sprites/sprite-op.ts","../src/av-canvas.ts"],"sourcesContent":["import { Rect } from '@webav/av-cliper';\n\n/**\n * 二维坐标系中的点\n */\nexport interface IPoint {\n  x: number;\n  y: number;\n}\n\n/**\n * 分辨率（尺寸）\n */\nexport interface IResolution {\n  width: number;\n  height: number;\n}\n\n/**\n * 画布分辨率与实际宽高的比例\n */\nexport interface ICvsRatio {\n  w: number;\n  h: number;\n}\n\n/**\n * 控制点：上、下、左、右，左上、左下、右上、右下、旋转\n * 当 Rect 只允许等比例缩放时（{@link Rect.fixedAspectRatio} = true），缺少 t、b、l、r 四个控制点\n */\nexport type RectCtrls = Partial<Record<'t' | 'b' | 'l' | 'r', Rect>> &\n  Record<'lt' | 'lb' | 'rt' | 'rb' | 'rotate', Rect>;\n\nexport const CTRL_KEYS = [\n  't',\n  'b',\n  'l',\n  'r',\n  'lt',\n  'lb',\n  'rt',\n  'rb',\n  'rotate',\n] as const;\n\nexport type TCtrlKey = (typeof CTRL_KEYS)[number];\n","import { Rect } from '@webav/av-cliper';\nimport { RectCtrls } from './types';\n\nexport function createEl(tagName: string): HTMLElement {\n  return document.createElement(tagName);\n}\n\n/**\n * 根据 canvas 创建该画布上的 Sprite 控制点生成器\n * 因为控制点的大小需要根据画布的大小动态调整\n */\nexport function createCtrlsGetter(cvsEl: HTMLCanvasElement) {\n  let ctrlSize = 16;\n  const cvsResizeOb = new ResizeObserver((entries) => {\n    const fisrtEntry = entries[0];\n    if (fisrtEntry == null) return;\n    ctrlSize = 10 / (fisrtEntry.contentRect.width / cvsEl.width);\n  });\n  cvsResizeOb.observe(cvsEl);\n  function rectCtrlsGetter(rect: Rect): RectCtrls {\n    const { w, h } = rect;\n    // 控制点元素大小, 以 分辨率 为基准\n    const sz = ctrlSize;\n    // half size\n    const hfSz = sz / 2;\n    const hfW = w / 2;\n    const hfH = h / 2;\n    // rotate size\n    const rtSz = sz * 1.5;\n    const hfRtSz = rtSz / 2;\n    // ctrl 坐标是相对于 sprite 中心点\n    const tblr = rect.fixedAspectRatio\n      ? {}\n      : {\n          t: new Rect(-hfSz, -hfH - hfSz, sz, sz, rect),\n          b: new Rect(-hfSz, hfH - hfSz, sz, sz, rect),\n          l: new Rect(-hfW - hfSz, -hfSz, sz, sz, rect),\n          r: new Rect(hfW - hfSz, -hfSz, sz, sz, rect),\n        };\n    return {\n      ...tblr,\n      lt: new Rect(-hfW - hfSz, -hfH - hfSz, sz, sz, rect),\n      lb: new Rect(-hfW - hfSz, hfH - hfSz, sz, sz, rect),\n      rt: new Rect(hfW - hfSz, -hfH - hfSz, sz, sz, rect),\n      rb: new Rect(hfW - hfSz, hfH - hfSz, sz, sz, rect),\n      rotate: new Rect(-hfRtSz, -hfH - sz * 2 - hfRtSz, rtSz, rtSz, rect),\n    };\n  }\n  return {\n    rectCtrlsGetter,\n    destroy: () => {\n      cvsResizeOb.disconnect();\n    },\n  };\n}\n","import { VisibleSprite } from '@webav/av-cliper';\nimport { EventTool } from '@webav/internal-utils';\n\nexport enum ESpriteManagerEvt {\n  ActiveSpriteChange = 'activeSpriteChange',\n  AddSprite = 'addSprite',\n}\n\nexport class SpriteManager {\n  #sprites: VisibleSprite[] = [];\n\n  #activeSprite: VisibleSprite | null = null;\n\n  #evtTool = new EventTool<{\n    [ESpriteManagerEvt.AddSprite]: (s: VisibleSprite) => void;\n    [ESpriteManagerEvt.ActiveSpriteChange]: (s: VisibleSprite | null) => void;\n  }>();\n\n  on = this.#evtTool.on;\n\n  get activeSprite(): VisibleSprite | null {\n    return this.#activeSprite;\n  }\n  set activeSprite(s: VisibleSprite | null) {\n    if (s === this.#activeSprite) return;\n    this.#activeSprite = s;\n    this.#evtTool.emit(ESpriteManagerEvt.ActiveSpriteChange, s);\n  }\n\n  async addSprite(vs: VisibleSprite): Promise<void> {\n    await vs.ready;\n    this.#sprites.push(vs);\n    this.#sprites = this.#sprites.sort((a, b) => a.zIndex - b.zIndex);\n    vs.on('propsChange', (props) => {\n      if (props.zIndex == null) return;\n      this.#sprites = this.#sprites.sort((a, b) => a.zIndex - b.zIndex);\n    });\n\n    this.#evtTool.emit(ESpriteManagerEvt.AddSprite, vs);\n  }\n\n  removeSprite(spr: VisibleSprite): void {\n    if (this.#activeSprite === spr) this.activeSprite = null;\n    this.#sprites = this.#sprites.filter((s) => s !== spr);\n    spr.destroy();\n  }\n\n  getSprites(filter: { time: boolean } = { time: true }): VisibleSprite[] {\n    return this.#sprites.filter(\n      (s) =>\n        s.visible &&\n        (filter.time\n          ? this.#renderTime >= s.time.offset &&\n            this.#renderTime <= s.time.offset + s.time.duration\n          : true),\n    );\n  }\n\n  #renderTime = 0;\n  updateRenderTime(time: number) {\n    this.#renderTime = time;\n\n    // 避免素材不可见，但渲染了素材边框控制点\n    const as = this.activeSprite;\n    if (\n      as != null &&\n      (time < as.time.offset || time > as.time.offset + as.time.duration)\n    ) {\n      this.activeSprite = null;\n    }\n  }\n\n  destroy(): void {\n    this.#evtTool.destroy();\n    this.#sprites.forEach((s) => s.destroy());\n    this.#sprites = [];\n  }\n}\n","import { CTRL_KEYS, ICvsRatio, RectCtrls, TCtrlKey } from '../types';\nimport { createEl } from '../utils';\nimport { VisibleSprite, Rect } from '@webav/av-cliper';\nimport { ESpriteManagerEvt, SpriteManager } from './sprite-manager';\n\nexport function renderCtrls(\n  container: HTMLElement,\n  cvsEl: HTMLCanvasElement,\n  sprMng: SpriteManager,\n  rectCtrlsGetter: (rect: Rect) => RectCtrls,\n): () => void {\n  const cvsRatio = {\n    w: cvsEl.clientWidth / cvsEl.width,\n    h: cvsEl.clientHeight / cvsEl.height,\n  };\n\n  const observer = new ResizeObserver(() => {\n    cvsRatio.w = cvsEl.clientWidth / cvsEl.width;\n    cvsRatio.h = cvsEl.clientHeight / cvsEl.height;\n\n    if (sprMng.activeSprite == null) return;\n    syncCtrlElPos(\n      sprMng.activeSprite,\n      rectEl,\n      ctrlsEl,\n      cvsRatio,\n      rectCtrlsGetter,\n    );\n  });\n\n  observer.observe(cvsEl);\n\n  let lastActSprEvtClear = () => {};\n  const { rectEl, ctrlsEl } = createRectAndCtrlEl(container);\n  const offSprChange = sprMng.on(ESpriteManagerEvt.ActiveSpriteChange, (s) => {\n    // 每次变更，需要清理上一个事件监听器\n    lastActSprEvtClear();\n    if (s == null) {\n      rectEl.style.display = 'none';\n      return;\n    }\n    syncCtrlElPos(s, rectEl, ctrlsEl, cvsRatio, rectCtrlsGetter);\n    lastActSprEvtClear = s.on('propsChange', () => {\n      syncCtrlElPos(s, rectEl, ctrlsEl, cvsRatio, rectCtrlsGetter);\n    });\n    rectEl.style.display = '';\n  });\n\n  return () => {\n    observer.disconnect();\n    offSprChange();\n    rectEl.remove();\n    lastActSprEvtClear();\n  };\n}\n\nfunction createRectAndCtrlEl(container: HTMLElement): {\n  rectEl: HTMLElement;\n  ctrlsEl: Record<TCtrlKey, HTMLElement>;\n} {\n  const rectEl = createEl('div');\n  rectEl.style.cssText = `\n    position: absolute;\n    pointer-events: none;\n    border: 1px solid #eee;\n    box-sizing: border-box;\n    display: none;\n  `;\n  const ctrlsEl = Object.fromEntries(\n    CTRL_KEYS.map((k) => {\n      const d = createEl('div');\n      d.style.cssText = `\n        display: none;\n        position: absolute;\n        border: 1px solid #3ee; border-radius: 50%;\n        box-sizing: border-box;\n        background-color: #fff;\n      `;\n      return [k, d];\n    }),\n  ) as Record<TCtrlKey, HTMLElement>;\n\n  Object.values(ctrlsEl).forEach((d) => rectEl.appendChild(d));\n  container.appendChild(rectEl);\n  return {\n    rectEl,\n    ctrlsEl,\n  };\n}\n\nfunction syncCtrlElPos(\n  s: VisibleSprite,\n  rectEl: HTMLElement,\n  ctrlsEl: Record<TCtrlKey, HTMLElement>,\n  cvsRatio: ICvsRatio,\n  rectCtrlsGetter: (rect: Rect) => RectCtrls,\n): void {\n  const { x, y, w, h, angle } = s.rect;\n  Object.assign(rectEl.style, {\n    left: `${x * cvsRatio.w}px`,\n    top: `${y * cvsRatio.h}px`,\n    width: `${w * cvsRatio.w}px`,\n    height: `${h * cvsRatio.h}px`,\n    rotate: `${angle}rad`,\n  });\n  Object.entries(rectCtrlsGetter(s.rect)).forEach(([k, { x, y, w, h }]) => {\n    // ctrl 是相对中心点定位的\n    Object.assign(ctrlsEl[k as TCtrlKey].style, {\n      display: 'block',\n      left: '50%',\n      top: '50%',\n      width: `${w * cvsRatio.w}px`,\n      height: `${h * cvsRatio.h}px`,\n      // border 1px, 所以要 -1\n      transform: `translate(${x * cvsRatio.w}px, ${y * cvsRatio.h}px)`,\n    });\n  });\n}\n","import { ESpriteManagerEvt, SpriteManager } from './sprite-manager';\nimport { ICvsRatio, IPoint, RectCtrls, TCtrlKey } from '../types';\nimport { VisibleSprite, Rect } from '@webav/av-cliper';\nimport { createEl } from '../utils';\n\n/**\n * 鼠标点击，激活 sprite\n */\nexport function activeSprite(\n  cvsEl: HTMLCanvasElement,\n  sprMng: SpriteManager,\n  rectCtrlsGetter: (rect: Rect) => RectCtrls,\n): () => void {\n  const cvsRatio = {\n    w: cvsEl.clientWidth / cvsEl.width,\n    h: cvsEl.clientHeight / cvsEl.height,\n  };\n\n  const observer = new ResizeObserver(() => {\n    cvsRatio.w = cvsEl.clientWidth / cvsEl.width;\n    cvsRatio.h = cvsEl.clientHeight / cvsEl.height;\n  });\n  observer.observe(cvsEl);\n\n  const onCvsMouseDown = (evt: MouseEvent): void => {\n    if (evt.button !== 0) return;\n    const { offsetX, offsetY } = evt;\n    const ofx = offsetX / cvsRatio.w;\n    const ofy = offsetY / cvsRatio.h;\n    if (sprMng.activeSprite != null) {\n      const [ctrlKey] =\n        (Object.entries(rectCtrlsGetter(sprMng.activeSprite.rect)).find(\n          ([, rect]) => rect.checkHit(ofx, ofy),\n        ) as [TCtrlKey, Rect]) ?? [];\n      if (ctrlKey != null) return;\n    }\n    sprMng.activeSprite =\n      sprMng\n        .getSprites()\n        // 排在后面的层级更高\n        .reverse()\n        .find((s) => s.visible && s.rect.checkHit(ofx, ofy)) ?? null;\n  };\n\n  cvsEl.addEventListener('pointerdown', onCvsMouseDown);\n\n  return () => {\n    observer.disconnect();\n    cvsEl.removeEventListener('pointerdown', onCvsMouseDown);\n  };\n}\n\n/**\n * 让canvas中的sprite可以被拖拽移动\n */\nexport function draggabelSprite(\n  cvsEl: HTMLCanvasElement,\n  sprMng: SpriteManager,\n  container: HTMLElement,\n  rectCtrlsGetter: (rect: Rect) => RectCtrls,\n): () => void {\n  const cvsRatio = {\n    w: cvsEl.clientWidth / cvsEl.width,\n    h: cvsEl.clientHeight / cvsEl.height,\n  };\n\n  const observer = new ResizeObserver(() => {\n    cvsRatio.w = cvsEl.clientWidth / cvsEl.width;\n    cvsRatio.h = cvsEl.clientHeight / cvsEl.height;\n  });\n  observer.observe(cvsEl);\n\n  let startX = 0;\n  let startY = 0;\n  let startRect: Rect | null = null;\n\n  const refline = createRefline(cvsEl, container);\n\n  let hitSpr: VisibleSprite | null = null;\n  // sprMng.activeSprite 在 av-canvas.ts -> activeSprite 中被赋值\n  const onCvsMouseDown = (evt: MouseEvent): void => {\n    // 鼠标左键才能拖拽移动\n    if (evt.button !== 0 || sprMng.activeSprite == null) return;\n    hitSpr = sprMng.activeSprite;\n    const { offsetX, offsetY, clientX, clientY } = evt;\n    // 如果已有激活 sprite，先判定是否命中其 ctrls\n    if (\n      hitRectCtrls({\n        rect: hitSpr.rect,\n        offsetX,\n        offsetY,\n        clientX,\n        clientY,\n        cvsRatio,\n        cvsEl,\n        rectCtrlsGetter,\n      })\n    ) {\n      // 命中 ctrl 是缩放 sprite，略过后续移动 sprite 逻辑\n      return;\n    }\n\n    startRect = hitSpr.rect.clone();\n\n    refline.magneticEffect(hitSpr.rect.x, hitSpr.rect.y, hitSpr.rect);\n\n    startX = clientX;\n    startY = clientY;\n    window.addEventListener('pointermove', onMouseMove);\n    window.addEventListener('pointerup', clearWindowEvt);\n  };\n\n  const onMouseMove = (evt: MouseEvent): void => {\n    if (hitSpr == null || startRect == null) return;\n\n    const { clientX, clientY } = evt;\n    let expectX = startRect.x + (clientX - startX) / cvsRatio.w;\n    let expectY = startRect.y + (clientY - startY) / cvsRatio.h;\n\n    updateRectWithSafeMargin(\n      hitSpr.rect,\n      cvsEl,\n      refline.magneticEffect(expectX, expectY, hitSpr.rect),\n    );\n  };\n\n  cvsEl.addEventListener('pointerdown', onCvsMouseDown);\n\n  const clearWindowEvt = (): void => {\n    refline.hide();\n    window.removeEventListener('pointermove', onMouseMove);\n    window.removeEventListener('pointerup', clearWindowEvt);\n  };\n\n  return () => {\n    observer.disconnect();\n    refline.destroy();\n    clearWindowEvt();\n    cvsEl.removeEventListener('pointerdown', onCvsMouseDown);\n  };\n}\n\n/**\n * 缩放 sprite\n */\nfunction scaleRect({\n  sprRect,\n  startX,\n  startY,\n  ctrlKey,\n  cvsRatio,\n  cvsEl,\n}: {\n  sprRect: Rect;\n  startX: number;\n  startY: number;\n  ctrlKey: TCtrlKey;\n  cvsRatio: ICvsRatio;\n  cvsEl: HTMLCanvasElement;\n}): void {\n  const startRect = sprRect.clone();\n\n  const onMouseMove = (evt: MouseEvent): void => {\n    const { clientX, clientY } = evt;\n    const deltaX = (clientX - startX) / cvsRatio.w;\n    const deltaY = (clientY - startY) / cvsRatio.h;\n\n    // 对角线上的点是等比例缩放，key 的长度为 2\n    const scaler = ctrlKey.length === 1 ? stretchScale : fixedRatioScale;\n    const { x, y, w, h } = startRect;\n    // rect 对角线角度\n    const diagonalAngle = Math.atan2(h, w);\n    const { incW, incH, incS, rotateAngle } = scaler({\n      deltaX,\n      deltaY,\n      angle: sprRect.angle,\n      ctrlKey,\n      diagonalAngle,\n    });\n\n    // 最小宽高缩放限定\n    const minSize = 10;\n    let newW = w;\n    let newH = h;\n    // 中心点缩放时，宽高增量是原来的两倍\n    let newIncW = startRect.fixedScaleCenter ? incW * 2 : incW;\n    let newIncH = startRect.fixedScaleCenter ? incH * 2 : incH;\n    // 最小长度缩放限定\n    let newIncS = incS;\n    // 起始对角线长度\n    const startS = Math.sqrt(h ** 2 + w ** 2);\n    // 最小对角线长度\n    const minS = Math.sqrt((minSize * (h / w)) ** 2 + minSize ** 2);\n    switch (ctrlKey) {\n      // 非等比例缩放时，变化的增量范围 由原宽高跟 minSize 的差值决定\n      // 非等比例缩放时，根据ctrlKey的不同，固定宽高中的一个，另一个根据增量计算，并考虑最小值限定\n      case 'l':\n        newW = Math.max(w + newIncW, minSize);\n        newIncS = Math.min(incS, w - minSize);\n        break;\n      case 'r':\n        newW = Math.max(w + newIncW, minSize);\n        newIncS = Math.max(incS, minSize - w);\n        break;\n      case 'b':\n        newH = Math.max(h + newIncH, minSize);\n        newIncS = Math.min(incS, h - minSize);\n        break;\n      case 't':\n        newH = Math.max(h + newIncH, minSize);\n        newIncS = Math.max(incS, minSize - h);\n        break;\n      // 等比例缩放时，变化（对角线长度）的增量范围由原对角线长度跟 minSize 对角线的差值决定\n      // 等比例缩放时，某一边达到最小值时保持宽高比例不变\n      case 'lt':\n      case 'lb':\n        newW = Math.max(w + newIncW, minSize);\n        newH = newW === minSize ? (h / w) * newW : h + newIncH;\n        newIncS = Math.min(incS, startS - minS);\n        break;\n      case 'rt':\n      case 'rb':\n        newW = Math.max(w + newIncW, minSize);\n        newH = newW === minSize ? (h / w) * newW : h + newIncH;\n        newIncS = Math.max(incS, minS - startS);\n        break;\n    }\n    let newX = x;\n    let newY = y;\n    if (startRect.fixedScaleCenter) {\n      newX = x + w / 2 - newW / 2;\n      newY = y + h / 2 - newH / 2;\n    } else {\n      const newCenterX = (newIncS / 2) * Math.cos(rotateAngle) + x + w / 2;\n      const newCenterY = (newIncS / 2) * Math.sin(rotateAngle) + y + h / 2;\n      newX = newCenterX - newW / 2;\n      newY = newCenterY - newH / 2;\n    }\n\n    updateRectWithSafeMargin(sprRect, cvsEl, {\n      x: newX,\n      y: newY,\n      w: newW,\n      h: newH,\n    });\n  };\n\n  const clearWindowEvt = (): void => {\n    window.removeEventListener('pointermove', onMouseMove);\n    window.removeEventListener('pointerup', clearWindowEvt);\n  };\n  window.addEventListener('pointermove', onMouseMove);\n  window.addEventListener('pointerup', clearWindowEvt);\n}\n\n/**\n * 拉伸缩放, 上t 下b 左l 右r\n */\nfunction stretchScale({\n  deltaX,\n  deltaY,\n  angle,\n  ctrlKey,\n}: {\n  deltaX: number;\n  deltaY: number;\n  angle: number;\n  ctrlKey: TCtrlKey;\n}): {\n  incW: number;\n  incH: number;\n  incS: number;\n  rotateAngle: number;\n} {\n  // 计算矩形增加的宽度\n  let incS = 0;\n  let incW = 0;\n  let incH = 0;\n  let rotateAngle = angle;\n  if (ctrlKey === 'l' || ctrlKey === 'r') {\n    incS = deltaX * Math.cos(angle) + deltaY * Math.sin(angle);\n    // l 缩放是反向的\n    incW = incS * (ctrlKey === 'l' ? -1 : 1);\n  } else if (ctrlKey === 't' || ctrlKey === 'b') {\n    // 计算矩形增加的宽度，旋转坐标系让x轴与角度重合，鼠标位置在x轴的投影（x值）即为增加的高度\n    rotateAngle = angle - Math.PI / 2;\n    incS = deltaX * Math.cos(rotateAngle) + deltaY * Math.sin(rotateAngle);\n    incH = incS * (ctrlKey === 'b' ? -1 : 1);\n  }\n\n  return { incW, incH, incS, rotateAngle };\n}\n\n/**\n * 等比例缩放\n */\nfunction fixedRatioScale({\n  deltaX,\n  deltaY,\n  angle,\n  ctrlKey,\n  diagonalAngle,\n}: {\n  deltaX: number;\n  deltaY: number;\n  angle: number;\n  ctrlKey: TCtrlKey;\n  diagonalAngle: number;\n}): {\n  incW: number;\n  incH: number;\n  incS: number;\n  rotateAngle: number;\n} {\n  // 坐标系旋转角度， lb->rt的对角线的初始角度为负数，所以需要乘以-1\n  const rotateAngle =\n    (ctrlKey === 'lt' || ctrlKey === 'rb' ? 1 : -1) * diagonalAngle + angle;\n  // 旋转坐标系让x轴与对角线重合，鼠标位置在x轴的投影（x值）即为增加的长度\n  const incS = deltaX * Math.cos(rotateAngle) + deltaY * Math.sin(rotateAngle);\n  // lb lt 缩放值是反向\n  const coefficient = ctrlKey === 'lt' || ctrlKey === 'lb' ? -1 : 1;\n  // 等比例缩放，增加宽高等于长度乘以对应的角度函数\n  // 因为等比例缩放，中心及被拖拽的点，一定在对角线上\n  const incW = incS * Math.cos(diagonalAngle) * coefficient;\n  const incH = incS * Math.sin(diagonalAngle) * coefficient;\n\n  return { incW, incH, incS, rotateAngle };\n}\n\nfunction hitRectCtrls({\n  rect,\n  cvsRatio,\n  offsetX,\n  offsetY,\n  clientX,\n  clientY,\n  cvsEl,\n  rectCtrlsGetter,\n}: {\n  rect: Rect;\n  cvsRatio: ICvsRatio;\n  offsetX: number;\n  offsetY: number;\n  clientX: number;\n  clientY: number;\n  cvsEl: HTMLCanvasElement;\n  rectCtrlsGetter: (rect: Rect) => RectCtrls;\n}): boolean {\n  // 将鼠标点击偏移坐标映射成 canvas 坐，\n  const ofx = offsetX / cvsRatio.w;\n  const ofy = offsetY / cvsRatio.h;\n  const [k] =\n    (Object.entries(rectCtrlsGetter(rect)).find(([, rect]) =>\n      rect.checkHit(ofx, ofy),\n    ) as [TCtrlKey, Rect]) ?? [];\n\n  if (k == null) return false;\n  if (k === 'rotate') {\n    rotateRect(rect, cntMap2Outer(rect.center, cvsRatio, cvsEl));\n  } else {\n    scaleRect({\n      sprRect: rect,\n      ctrlKey: k,\n      startX: clientX,\n      startY: clientY,\n      cvsRatio,\n      cvsEl,\n    });\n  }\n  // 命中 ctrl 后续是缩放 sprite，略过移动 sprite 逻辑\n  return true;\n}\n\n/**\n * 监听拖拽事件，将鼠标坐标转换为旋转角度\n * 旋转时，rect的坐标不变\n */\nfunction rotateRect(rect: Rect, outCnt: IPoint): void {\n  const onMove = ({ clientX, clientY }: MouseEvent): void => {\n    // 映射为 中心点坐标系\n    const x = clientX - outCnt.x;\n    const y = clientY - outCnt.y;\n    // 旋转控制点在正上方，与 x 轴是 -90°， 所以需要加上 Math.PI / 2\n    const angle = Math.atan2(y, x) + Math.PI / 2;\n    rect.angle = angle;\n  };\n  const clear = (): void => {\n    window.removeEventListener('pointermove', onMove);\n    window.removeEventListener('pointerup', clear);\n  };\n  window.addEventListener('pointermove', onMove);\n  window.addEventListener('pointerup', clear);\n}\n\n/**\n * canvas 内部（resolution）坐标映射成外部（DOM）坐标\n */\nfunction cntMap2Outer(\n  cnt: IPoint,\n  cvsRatio: ICvsRatio,\n  cvsEl: HTMLElement,\n): IPoint {\n  const x = cnt.x * cvsRatio.w;\n  const y = cnt.y * cvsRatio.h;\n\n  const { left, top } = cvsEl.getBoundingClientRect();\n  return {\n    x: x + left,\n    y: y + top,\n  };\n}\n\n/**\n * 限制安全范围，避免 sprite 完全超出边界\n */\nfunction updateRectWithSafeMargin(\n  rect: Rect,\n  cvsEl: HTMLCanvasElement,\n  value: Partial<Pick<Rect, 'x' | 'y' | 'w' | 'h'>>,\n) {\n  const newState = { x: rect.x, y: rect.y, w: rect.w, h: rect.h, ...value };\n  const safeWidth = cvsEl.width * 0.05;\n  const safeHeight = cvsEl.height * 0.05;\n  if (newState.x < -newState.w + safeWidth) {\n    newState.x = -newState.w + safeWidth;\n  } else if (newState.x > cvsEl.width - safeWidth) {\n    newState.x = cvsEl.width - safeWidth;\n  }\n  if (newState.y < -newState.h + safeHeight) {\n    newState.y = -newState.h + safeHeight;\n  } else if (newState.y > cvsEl.height - safeHeight) {\n    newState.y = cvsEl.height - safeHeight;\n  }\n  rect.x = newState.x;\n  rect.y = newState.y;\n  rect.w = newState.w;\n  rect.h = newState.h;\n}\n\n/**\n * 创建四周+中线参考线, 靠近具有磁吸效果\n */\nfunction createRefline(cvsEl: HTMLCanvasElement, container: HTMLElement) {\n  const reflineBaseCSS = `display: none; position: absolute;`;\n  const baseSettings = { w: 0, h: 0, x: 0, y: 0 } as const;\n  const reflineSettings: Record<\n    'top' | 'bottom' | 'left' | 'right' | 'vertMiddle' | 'horMiddle',\n    {\n      // 四周加中线参考线，它们的坐标、宽高只能是 0 ｜ 50 ｜ 100\n      w: 0 | 50 | 100;\n      h: 0 | 50 | 100;\n      x: 0 | 50 | 100;\n      y: 0 | 50 | 100;\n      ref: { prop: 'x' | 'y'; val: (rect: Rect) => number };\n    }\n  > = {\n    vertMiddle: {\n      ...baseSettings,\n      h: 100,\n      x: 50,\n      ref: { prop: 'x', val: ({ w }) => (cvsEl.width - w) / 2 },\n    },\n    horMiddle: {\n      ...baseSettings,\n      w: 100,\n      y: 50,\n      ref: { prop: 'y', val: ({ h }) => (cvsEl.height - h) / 2 },\n    },\n    top: {\n      ...baseSettings,\n      w: 100,\n      ref: { prop: 'y', val: () => 0 },\n    },\n    bottom: {\n      ...baseSettings,\n      w: 100,\n      y: 100,\n      ref: { prop: 'y', val: ({ h }) => cvsEl.height - h },\n    },\n    left: {\n      ...baseSettings,\n      h: 100,\n      ref: { prop: 'x', val: () => 0 },\n    },\n    right: {\n      ...baseSettings,\n      h: 100,\n      x: 100,\n      ref: { prop: 'x', val: ({ w }) => cvsEl.width - w },\n    },\n  } as const;\n\n  const lineWrap = createEl('div');\n  lineWrap.style.cssText = `\n    position: absolute;\n    top: 0; left: 0;\n    width: 100%; height: 100%;\n    pointer-events: none;\n    box-sizing: border-box;\n  `;\n  const reflineEls = Object.fromEntries(\n    Object.entries(reflineSettings).map(([key, { w, h, x, y }]) => {\n      const lineEl = createEl('div');\n      lineEl.style.cssText = `\n        ${reflineBaseCSS}\n        border-${w > 0 ? 'top' : 'left'}: 1px solid #3ee;\n        top: ${y}%; left: ${x}%;\n        ${x === 100 ? 'margin-left: -1px' : ''};\n        ${y === 100 ? 'margin-top: -1px' : ''};\n        width: ${w}%; height: ${h}%;\n      `;\n      lineWrap.appendChild(lineEl);\n      return [key, lineEl];\n    }),\n  ) as Record<keyof typeof reflineSettings, HTMLDivElement>;\n  container.appendChild(lineWrap);\n\n  const magneticDistance = 6 / (900 / cvsEl.width);\n  return {\n    magneticEffect(expectX: number, expectY: number, rect: Rect) {\n      const retVal = { x: expectX, y: expectY };\n      let reflineKey: keyof typeof reflineSettings;\n      let correctionState = { x: false, y: false };\n      for (reflineKey in reflineSettings) {\n        const { prop, val } = reflineSettings[reflineKey].ref;\n        if (correctionState[prop]) continue;\n\n        const refVal = val(rect);\n        if (\n          Math.abs(rect[prop] - refVal) <= magneticDistance &&\n          Math.abs(rect[prop] - (prop === 'x' ? expectX : expectY)) <=\n            magneticDistance\n        ) {\n          retVal[prop] = refVal;\n          reflineEls[reflineKey].style.display = 'block';\n          correctionState[prop] = true;\n        } else {\n          reflineEls[reflineKey].style.display = 'none';\n        }\n      }\n      return retVal;\n    },\n    hide() {\n      Object.values(reflineEls).forEach((el) => (el.style.display = 'none'));\n    },\n    destroy() {\n      lineWrap.remove();\n    },\n  };\n}\n\n/**\n * 根据当前位置（sprite & ctrls），动态调整鼠标样式\n */\nexport function dynamicCusor(\n  cvsEl: HTMLCanvasElement,\n  sprMng: SpriteManager,\n  rectCtrlsGetter: (rect: Rect) => RectCtrls,\n): () => void {\n  const cvsRatio = {\n    w: cvsEl.clientWidth / cvsEl.width,\n    h: cvsEl.clientHeight / cvsEl.height,\n  };\n\n  const observer = new ResizeObserver(() => {\n    cvsRatio.w = cvsEl.clientWidth / cvsEl.width;\n    cvsRatio.h = cvsEl.clientHeight / cvsEl.height;\n  });\n  observer.observe(cvsEl);\n\n  const cvsStyle = cvsEl.style;\n\n  let actSpr = sprMng.activeSprite;\n  sprMng.on(ESpriteManagerEvt.ActiveSpriteChange, (s) => {\n    actSpr = s;\n    if (s == null) cvsStyle.cursor = '';\n  });\n  // 鼠标按下时，在操作过程中，不需要变换鼠标样式\n  let isMSDown = false;\n  const onDown = ({ offsetX, offsetY }: MouseEvent): void => {\n    isMSDown = true;\n    // 将鼠标点击偏移坐标映射成 canvas 坐，\n    const ofx = offsetX / cvsRatio.w;\n    const ofy = offsetY / cvsRatio.h;\n    // 直接选中 sprite 时，需要改变鼠标样式为 move\n    if (actSpr?.rect.checkHit(ofx, ofy) === true && cvsStyle.cursor === '') {\n      cvsStyle.cursor = 'move';\n    }\n  };\n  const onWindowUp = (): void => {\n    isMSDown = false;\n  };\n\n  // 八个 ctrl 点位对应的鼠标样式，构成循环\n  const curStyles = [\n    'ns-resize',\n    'nesw-resize',\n    'ew-resize',\n    'nwse-resize',\n    'ns-resize',\n    'nesw-resize',\n    'ew-resize',\n    'nwse-resize',\n  ];\n  const curInitIdx = { t: 0, rt: 1, r: 2, rb: 3, b: 4, lb: 5, l: 6, lt: 7 };\n\n  const onMove = (evt: MouseEvent): void => {\n    // 按下之后，不再变化，因为可能是在拖拽控制点\n    if (actSpr == null || isMSDown) return;\n    const { offsetX, offsetY } = evt;\n    const ofx = offsetX / cvsRatio.w;\n    const ofy = offsetY / cvsRatio.h;\n    const [ctrlKey] =\n      (Object.entries(rectCtrlsGetter(actSpr.rect)).find(([, rect]) =>\n        rect.checkHit(ofx, ofy),\n      ) as [TCtrlKey, Rect]) ?? [];\n\n    if (ctrlKey != null) {\n      if (ctrlKey === 'rotate') {\n        cvsStyle.cursor = 'crosshair';\n        return;\n      }\n      // 旋转后，控制点的箭头指向也需要修正\n      const angle = actSpr.rect.angle;\n      const oa = angle < 0 ? angle + 2 * Math.PI : angle;\n      // 每个控制点的初始样式（idx） + 旋转角度导致的偏移，即为新鼠标样式\n      // 每旋转45°，偏移+1，以此在curStyles中循环\n      const idx =\n        (curInitIdx[ctrlKey] + Math.floor((oa + Math.PI / 8) / (Math.PI / 4))) %\n        8;\n      cvsStyle.cursor = curStyles[idx];\n      return;\n    }\n    if (actSpr.rect.checkHit(ofx, ofy)) {\n      cvsStyle.cursor = 'move';\n      return;\n    }\n    // 未命中 ctrls、sprite，重置为默认鼠标样式\n    cvsStyle.cursor = '';\n  };\n\n  cvsEl.addEventListener('pointermove', onMove);\n  cvsEl.addEventListener('pointerdown', onDown);\n  window.addEventListener('pointerup', onWindowUp);\n\n  return () => {\n    observer.disconnect();\n    cvsEl.removeEventListener('pointermove', onMove);\n    cvsEl.removeEventListener('pointerdown', onDown);\n    window.removeEventListener('pointerup', onWindowUp);\n  };\n}\n","import {\n  Log,\n  Combinator,\n  OffscreenSprite,\n  VisibleSprite,\n  MediaStreamClip,\n  ICombinatorOpts,\n} from '@webav/av-cliper';\nimport { renderCtrls } from './sprites/render-ctrl';\nimport { ESpriteManagerEvt, SpriteManager } from './sprites/sprite-manager';\nimport {\n  activeSprite,\n  draggabelSprite,\n  dynamicCusor,\n} from './sprites/sprite-op';\nimport { IResolution } from './types';\nimport { createCtrlsGetter, createEl } from './utils';\nimport { workerTimer, EventTool } from '@webav/internal-utils';\n\n/**\n * 默认的音频设置，⚠️ 不要变更它的值 ⚠️\n */\nconst DEFAULT_AUDIO_CONF = {\n  sampleRate: 48000,\n  channelCount: 2,\n  codec: 'mp4a.40.2',\n} as const;\n\nfunction createInitCvsEl(resolution: IResolution): HTMLCanvasElement {\n  const cvsEl = createEl('canvas') as HTMLCanvasElement;\n  cvsEl.style.cssText = `\n    width: 100%;\n    height: 100%;\n    display: block;\n    touch-action: none;\n  `;\n  cvsEl.width = resolution.width;\n  cvsEl.height = resolution.height;\n\n  return cvsEl;\n}\n\n/**\n *\n * 一个可交互的画布，让用户添加各种素材，支持基础交互（拖拽、缩放、旋转、时间偏移）\n *\n * 用于在 Web 环境中实现视频剪辑、直播推流工作台功能\n *\n * @description\n *\n  - 添加/删除素材（视频、音频、图片、文字）\n  - 分割（裁剪）素材\n  - 控制素材在视频中的空间属性（坐标、旋转、缩放）\n  - 控制素材在视频中的时间属性（偏移、时长）\n  - 实时预览播放\n  - 纯浏览器环境生成视频\n\n * @see [直播录制](https://webav-tech.github.io/WebAV/demo/4_2-recorder-avcanvas)\n * @see [视频剪辑](https://webav-tech.github.io/WebAV/demo/6_4-video-editor)\n * @example\n * const avCvs = new AVCanvas(document.querySelector('#app'), {\n *   bgColor: '#333',\n *   width: 1920,\n *   height: 1080,\n * });\n *\n */\nexport class AVCanvas {\n  #cvsEl: HTMLCanvasElement;\n\n  #spriteManager: SpriteManager;\n\n  #cvsCtx: CanvasRenderingContext2D;\n\n  #destroyed = false;\n\n  #clears: Array<() => void> = [];\n  #stopRender: () => void;\n\n  #evtTool = new EventTool<{\n    timeupdate: (time: number) => void;\n    paused: () => void;\n    playing: () => void;\n    activeSpriteChange: (sprite: VisibleSprite | null) => void;\n  }>();\n  on = this.#evtTool.on;\n\n  #opts;\n\n  #backgroundOptions: {\n    mode: 'cover' | 'contain' | 'stretch' | 'repeat';\n    opacity: number;\n    blur: number;\n  } = {\n    mode: 'cover',\n    opacity: 1,\n    blur: 0,\n  };\n\n  // 在 AVCanvas 类中添加\n  #backgroundImage: ImageBitmap | null = null;\n  #originalBackgroundImage: ImageBitmap | null = null;\n\n  /**\n   * 创建 `AVCanvas` 类的实例。\n   * @param attchEl - 要添加画布的元素。\n   * @param opts - 画布的选项\n   * @param opts.bgColor - 画布的背景颜色。\n   * @param opts.width - 画布的宽度。\n   * @param opts.height - 画布的高度。\n   */\n  constructor(\n    attchEl: HTMLElement,\n    opts: {\n      bgColor: string;\n    } & IResolution,\n  ) {\n    this.#opts = opts;\n    this.#cvsEl = createInitCvsEl(opts);\n    const ctx = this.#cvsEl.getContext('2d', { alpha: false });\n    if (ctx == null) throw Error('canvas context is null');\n    this.#cvsCtx = ctx;\n    const container = createEl('div');\n    container.style.cssText =\n      'width: 100%; height: 100%; position: relative; overflow: hidden;';\n    container.appendChild(this.#cvsEl);\n    attchEl.appendChild(container);\n\n    createEmptyOscillatorNode(this.#audioCtx).connect(this.#captureAudioDest);\n\n    this.#spriteManager = new SpriteManager();\n\n    const { rectCtrlsGetter, destroy: ctrlGetterDestroy } = createCtrlsGetter(\n      this.#cvsEl,\n    );\n    this.#clears.push(\n      ctrlGetterDestroy,\n      // 鼠标样式、控制 sprite 依赖 activeSprite，\n      // activeSprite 需要在他们之前监听到 mousedown 事件 (代码顺序需要靠前)\n      activeSprite(this.#cvsEl, this.#spriteManager, rectCtrlsGetter),\n      dynamicCusor(this.#cvsEl, this.#spriteManager, rectCtrlsGetter),\n      draggabelSprite(\n        this.#cvsEl,\n        this.#spriteManager,\n        container,\n        rectCtrlsGetter,\n      ),\n      renderCtrls(container, this.#cvsEl, this.#spriteManager, rectCtrlsGetter),\n      this.#spriteManager.on(ESpriteManagerEvt.AddSprite, (s) => {\n        const { rect } = s;\n        // 默认居中\n        if (rect.x === 0 && rect.y === 0) {\n          rect.x = (this.#cvsEl.width - rect.w) / 2;\n          rect.y = (this.#cvsEl.height - rect.h) / 2;\n        }\n      }),\n      EventTool.forwardEvent(this.#spriteManager, this.#evtTool, [\n        ESpriteManagerEvt.ActiveSpriteChange,\n      ]),\n    );\n\n    let lastRenderTime = this.#renderTime;\n    let start = performance.now();\n    let runCnt = 0;\n    const expectFrameTime = 1000 / 30;\n    this.#stopRender = workerTimer(() => {\n      // workerTimer 会略快于真实时钟，使用真实时间（performance.now）作为基准\n      // 跳过部分运行帧修正时间，避免导致音画不同步\n      if ((performance.now() - start) / (expectFrameTime * runCnt) < 1) {\n        return;\n      }\n      runCnt += 1;\n      this.#cvsCtx.fillStyle = opts.bgColor;\n      this.#cvsCtx.fillRect(0, 0, this.#cvsEl.width, this.#cvsEl.height);\n\n      // 如果有背景图片，绘制背景图片\n      if (this.#backgroundImage) {\n        const { width, height } = this.#cvsEl;\n        const { mode, opacity } = this.#backgroundOptions;\n\n        // 保存当前上下文状态\n        this.#cvsCtx.save();\n\n        // 设置透明度\n        if (opacity !== 1) {\n          this.#cvsCtx.globalAlpha = opacity;\n        }\n\n        // 根据不同模式绘制背景\n        switch (mode) {\n          case 'cover':\n            // 覆盖模式，保持宽高比填满整个画布\n            drawImageCover(\n              this.#cvsCtx,\n              this.#backgroundImage,\n              0,\n              0,\n              width,\n              height,\n            );\n            break;\n          case 'contain':\n            // 包含模式，保持宽高比完整显示图片\n            drawImageContain(\n              this.#cvsCtx,\n              this.#backgroundImage,\n              0,\n              0,\n              width,\n              height,\n            );\n            break;\n          case 'stretch':\n            // 拉伸模式，拉伸填满整个画布\n            this.#cvsCtx.drawImage(this.#backgroundImage, 0, 0, width, height);\n            break;\n          case 'repeat':\n            // 重复模式，平铺填满整个画布\n            const pattern = this.#cvsCtx.createPattern(\n              this.#backgroundImage,\n              'repeat',\n            );\n            if (pattern) {\n              this.#cvsCtx.fillStyle = pattern;\n              this.#cvsCtx.fillRect(0, 0, width, height);\n            }\n            break;\n        }\n      }\n      this.#render();\n\n      if (lastRenderTime !== this.#renderTime) {\n        lastRenderTime = this.#renderTime;\n        this.#evtTool.emit('timeupdate', Math.round(lastRenderTime));\n      }\n    }, expectFrameTime);\n\n    // ;(window as any).cvsEl = this.#cvsEl\n  }\n\n  #renderTime = 0e6;\n  #updateRenderTime(time: number) {\n    this.#renderTime = time;\n    this.#spriteManager.updateRenderTime(time);\n  }\n\n  #pause() {\n    const emitPaused = this.#playState.step !== 0;\n    this.#playState.step = 0;\n    if (emitPaused) {\n      this.#evtTool.emit('paused');\n      this.#audioCtx.suspend();\n    }\n    for (const asn of this.#playingAudioCache) {\n      asn.stop();\n      asn.disconnect();\n    }\n    this.#playingAudioCache.clear();\n  }\n\n  #audioCtx = new AudioContext();\n  #captureAudioDest = this.#audioCtx.createMediaStreamDestination();\n\n  #playingAudioCache: Set<AudioBufferSourceNode> = new Set();\n  #render() {\n    const cvsCtx = this.#cvsCtx;\n    let ts = this.#renderTime;\n    const { start, end, step, audioPlayAt } = this.#playState;\n    if (step !== 0 && ts >= start && ts < end) {\n      ts += step;\n    } else {\n      this.#pause();\n    }\n    this.#updateRenderTime(ts);\n\n    const ctxDestAudioData: Float32Array[][] = [];\n    for (const s of this.#spriteManager.getSprites()) {\n      cvsCtx.save();\n      const { audio } = s.render(cvsCtx, ts - s.time.offset);\n      cvsCtx.restore();\n\n      ctxDestAudioData.push(audio);\n    }\n    cvsCtx.resetTransform();\n\n    if (step !== 0) {\n      const curAudioTime = Math.max(this.#audioCtx.currentTime, audioPlayAt);\n      const audioSourceArr = convertPCM2AudioSource(\n        ctxDestAudioData,\n        this.#audioCtx,\n      );\n\n      let addTime = 0;\n      for (const ads of audioSourceArr) {\n        ads.start(curAudioTime);\n        ads.connect(this.#audioCtx.destination);\n        ads.connect(this.#captureAudioDest);\n\n        this.#playingAudioCache.add(ads);\n        ads.onended = () => {\n          ads.disconnect();\n          this.#playingAudioCache.delete(ads);\n        };\n        addTime = Math.max(addTime, ads.buffer?.duration ?? 0);\n      }\n      this.#playState.audioPlayAt = curAudioTime + addTime;\n    }\n  }\n\n  #playState = {\n    start: 0,\n    end: 0,\n    // paused state when step equal 0\n    step: 0,\n    // step: (1000 / 30) * 1000,\n    audioPlayAt: 0,\n  };\n  /**\n   * 每 33ms 更新一次画布，绘制已添加的 Sprite\n   * @param opts - 播放选项\n   * @param opts.start - 开始播放的时间（单位：微秒）\n   * @param [opts.end] - 结束播放的时间（单位：微秒）。如果未指定，则播放到最后一个 Sprite 的结束时间\n   * @param [opts.playbackRate] - 播放速率。1 表示正常速度，2 表示两倍速度，0.5 表示半速等。如果未指定，则默认为 1\n   * @throws 如果开始时间大于等于结束时间或小于 0，则抛出错误\n   */\n  play(opts: { start: number; end?: number; playbackRate?: number }) {\n    const spriteTimes = this.#spriteManager\n      .getSprites({ time: false })\n      .map((s) => s.time.offset + s.time.duration);\n    const end =\n      opts.end ??\n      (spriteTimes.length > 0 ? Math.max(...spriteTimes) : Infinity);\n\n    if (opts.start >= end || opts.start < 0) {\n      throw Error(\n        `Invalid time parameter, ${JSON.stringify({ start: opts.start, end })}`,\n      );\n    }\n\n    this.#updateRenderTime(opts.start);\n    this.#spriteManager.getSprites({ time: false }).forEach((vs) => {\n      const { offset, duration } = vs.time;\n      const selfOffset = this.#renderTime - offset;\n      vs.preFrame(selfOffset > 0 && selfOffset < duration ? selfOffset : 0);\n    });\n\n    this.#playState.start = opts.start;\n    this.#playState.end = end;\n    // AVCanvas 30FPS，将播放速率转换成步长\n    this.#playState.step = (opts.playbackRate ?? 1) * (1000 / 30) * 1000;\n    this.#audioCtx.resume();\n    this.#playState.audioPlayAt = 0;\n\n    this.#evtTool.emit('playing');\n    Log.info('AVCanvs play by:', this.#playState);\n  }\n\n  /**\n   * 暂停播放，画布内容不再更新\n   */\n  pause() {\n    this.#pause();\n  }\n\n  /**\n   * 预览 `AVCanvas` 指定时间的图像帧\n   */\n  previewFrame(time: number) {\n    this.#updateRenderTime(time);\n    this.#pause();\n  }\n\n  /**\n   * 获取当前帧的截图图像 返回的是一个base64\n   */\n  captureImage(): string {\n    return this.#cvsEl.toDataURL();\n  }\n\n  get activeSprite() {\n    return this.#spriteManager.activeSprite;\n  }\n  set activeSprite(s: VisibleSprite | null) {\n    this.#spriteManager.activeSprite = s;\n  }\n\n  #sprMapAudioNode = new WeakMap<VisibleSprite, AudioNode>();\n  /**\n   * 添加 {@link VisibleSprite}\n   * @param args {@link VisibleSprite}\n   * @example\n   * const sprite = new VisibleSprite(\n   *   new ImgClip({\n   *     type: 'image/gif',\n   *     stream: (await fetch('https://xx.gif')).body!,\n   *   }),\n   * );\n   */\n  addSprite: SpriteManager['addSprite'] = async (vs) => {\n    if (this.#audioCtx.state === 'suspended')\n      this.#audioCtx.resume().catch(Log.error);\n\n    const clip = vs.getClip();\n    if (clip instanceof MediaStreamClip && clip.audioTrack != null) {\n      const audioNode = this.#audioCtx.createMediaStreamSource(\n        new MediaStream([clip.audioTrack]),\n      );\n      audioNode.connect(this.#captureAudioDest);\n      this.#sprMapAudioNode.set(vs, audioNode);\n    }\n    await this.#spriteManager.addSprite(vs);\n    vs.preFrame(0);\n  };\n  /**\n   * 删除 {@link VisibleSprite}\n   * @param args\n   * @returns\n   * @example\n   * const sprite = new VisibleSprite();\n   * avCvs.removeSprite(sprite);\n   */\n  removeSprite: SpriteManager['removeSprite'] = (vs) => {\n    this.#sprMapAudioNode.get(vs)?.disconnect();\n    this.#spriteManager.removeSprite(vs);\n  };\n\n  /**\n   * 销毁实例\n   */\n  destroy(): void {\n    if (this.#destroyed) return;\n    this.#destroyed = true;\n\n    this.#audioCtx.close();\n    this.#captureAudioDest.disconnect();\n    this.#evtTool.destroy();\n    this.#stopRender();\n    this.#cvsEl.parentElement?.remove();\n    this.#clears.forEach((fn) => fn());\n    this.#playingAudioCache.clear();\n    this.#spriteManager.destroy();\n  }\n\n  /**\n   * 合成所有素材的图像与音频，返回实时媒体流 `MediaStream`\n   *\n   * 可用于 WebRTC 推流，或由 {@link [AVRecorder](../../av-recorder/classes/AVRecorder.html)} 录制生成视频文件\n   *\n   * @see [直播录制](https://webav-tech.github.io/WebAV/demo/4_2-recorder-avcanvas)\n   *\n   */\n  captureStream(): MediaStream {\n    if (this.#audioCtx.state === 'suspended') {\n      this.#audioCtx.resume().catch(Log.error);\n    }\n\n    const ms = new MediaStream(\n      this.#cvsEl\n        .captureStream()\n        .getTracks()\n        .concat(this.#captureAudioDest.stream.getTracks()),\n    );\n    Log.info(\n      'AVCanvas.captureStream, tracks:',\n      ms.getTracks().map((t) => t.kind),\n    );\n    return ms;\n  }\n\n  /**\n   * 创建一个视频合成器 {@link [Combinator](../../av-cliper/classes/Combinator.html)} 实例，用于将当前画布添加的 Sprite 导出为视频文件流\n   *\n   * @param opts - 创建 Combinator 的可选参数\n   * @throws 如果没有添加素材，会抛出错误\n   *\n   * @example\n   * avCvs.createCombinator().output() // => ReadableStream\n   *\n   * @see [视频剪辑](https://webav-tech.github.io/WebAV/demo/6_4-video-editor)\n   */\n  async createCombinator(opts: ICombinatorOpts = {}) {\n    Log.info('AVCanvas.createCombinator, opts:', opts);\n\n    const com = new Combinator({ ...this.#opts, ...opts });\n    const sprites = this.#spriteManager.getSprites({ time: false });\n    if (sprites.length === 0) throw Error('No sprite added');\n\n    for (const vs of sprites) {\n      const os = new OffscreenSprite(vs.getClip());\n      os.time = { ...vs.time };\n      vs.copyStateTo(os);\n      await com.addSprite(os);\n    }\n    return com;\n  }\n\n  /**\n   * 设置背景图片\n   * @param image 背景图片（ImageBitmap、HTMLImageElement 或 URL）\n   * @param options 可选配置（如拉伸模式、透明度等）\n   */\n  async setBackgroundImage(\n    image: ImageBitmap | HTMLImageElement | string,\n    options: {\n      mode?: 'cover' | 'contain' | 'stretch' | 'repeat';\n      opacity?: number;\n      blur?: number;\n    } = {},\n  ): Promise<void> {\n    // 如果传入的是 URL 字符串，先加载图片\n    let originalImage: ImageBitmap;\n    if (typeof image === 'string') {\n      const response = await fetch(image);\n      const blob = await response.blob();\n      originalImage = await createImageBitmap(blob);\n    } else if (image instanceof HTMLImageElement) {\n      // 如果是 HTMLImageElement，转换为 ImageBitmap\n      originalImage = await createImageBitmap(image);\n    } else {\n      originalImage = image;\n    }\n\n    // 保存原始图像用于重新处理\n    this.#originalBackgroundImage = originalImage;\n\n    // 保存选项\n    this.#backgroundOptions = {\n      mode: options.mode || 'cover',\n      opacity: options.opacity !== undefined ? options.opacity : 1,\n      blur: options.blur !== undefined ? options.blur : 0,\n    };\n\n    // 如果需要模糊效果，预先处理图像\n    if (this.#backgroundOptions.blur > 0) {\n      // 创建离屏 Canvas 来应用模糊效果\n      const offscreenCanvas = new OffscreenCanvas(\n        originalImage.width,\n        originalImage.height,\n      );\n      const offscreenCtx = offscreenCanvas.getContext('2d');\n\n      if (offscreenCtx) {\n        // 应用模糊效果\n        offscreenCtx.filter = `blur(${this.#backgroundOptions.blur}px)`;\n\n        // 绘制图像\n        offscreenCtx.drawImage(originalImage, 0, 0);\n\n        // 创建处理后的 ImageBitmap\n        this.#backgroundImage = await createImageBitmap(offscreenCanvas);\n      } else {\n        // 如果无法创建上下文，使用原始图像\n        this.#backgroundImage = originalImage;\n      }\n    } else {\n      // 不需要模糊效果，直接使用原始图像\n      this.#backgroundImage = originalImage;\n    }\n  }\n\n  /**\n   * 更新背景图片的模糊效果或透明度\n   * @param options 可选配置（模式、透明度、模糊度）\n   */\n  async updateBackgroundOptions(\n    options: {\n      mode?: 'cover' | 'contain' | 'stretch' | 'repeat';\n      opacity?: number;\n      blur?: number;\n    } = {},\n  ): Promise<void> {\n    if (!this.#originalBackgroundImage) return;\n\n    // 更新选项\n    if (options.mode !== undefined) {\n      this.#backgroundOptions.mode = options.mode;\n    }\n    if (options.opacity !== undefined) {\n      this.#backgroundOptions.opacity = options.opacity;\n    }\n    if (options.blur !== undefined) {\n      this.#backgroundOptions.blur = options.blur;\n    }\n\n    // 如果模糊度发生变化，重新处理图像\n    if (options.blur !== undefined) {\n      if (this.#backgroundOptions.blur > 0) {\n        // 创建离屏 Canvas 来应用模糊效果\n        const offscreenCanvas = new OffscreenCanvas(\n          this.#originalBackgroundImage.width,\n          this.#originalBackgroundImage.height,\n        );\n        const offscreenCtx = offscreenCanvas.getContext('2d');\n\n        if (offscreenCtx) {\n          // 应用模糊效果\n          offscreenCtx.filter = `blur(${this.#backgroundOptions.blur}px)`;\n\n          // 绘制图像\n          offscreenCtx.drawImage(this.#originalBackgroundImage, 0, 0);\n\n          // 创建处理后的 ImageBitmap\n          this.#backgroundImage = await createImageBitmap(offscreenCanvas);\n        }\n      } else {\n        // 不需要模糊效果，直接使用原始图像\n        this.#backgroundImage = this.#originalBackgroundImage;\n      }\n    }\n  }\n\n  /**\n   * 清除背景图片，恢复使用纯色背景\n   */\n  clearBackgroundImage(): void {\n    this.#backgroundImage = null;\n    this.#originalBackgroundImage = null;\n  }\n}\n\nfunction convertPCM2AudioSource(pcmData: Float32Array[][], ctx: AudioContext) {\n  const asArr: AudioBufferSourceNode[] = [];\n  if (pcmData.length === 0) return asArr;\n\n  for (const [chan0Buf, chan1Buf] of pcmData) {\n    if (chan0Buf == null) continue;\n    if (chan0Buf.length <= 0) continue;\n\n    const buf = ctx.createBuffer(\n      2,\n      chan0Buf.length,\n      DEFAULT_AUDIO_CONF.sampleRate,\n    );\n    buf.copyToChannel(chan0Buf, 0);\n    buf.copyToChannel(chan1Buf ?? chan0Buf, 1);\n    const audioSource = ctx.createBufferSource();\n    audioSource.buffer = buf;\n    asArr.push(audioSource);\n  }\n  return asArr;\n}\n\n/**\n * 空背景音，让 dest 能持续收到音频数据，否则时间会异常偏移\n */\nfunction createEmptyOscillatorNode(ctx: AudioContext) {\n  const osc = ctx.createOscillator();\n  const real = new Float32Array([0, 0]);\n  const imag = new Float32Array([0, 0]);\n  const wave = ctx.createPeriodicWave(real, imag, {\n    disableNormalization: true,\n  });\n  osc.setPeriodicWave(wave);\n  osc.start();\n  return osc;\n}\n\n/**\n * 绘制图片并保持宽高比填满整个目标区域（类似CSS的background-size: cover）\n * 图片可能会被裁剪，但不会变形\n */\nfunction drawImageCover(\n  ctx: CanvasRenderingContext2D,\n  img: ImageBitmap,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n): void {\n  const imgRatio = img.width / img.height;\n  const targetRatio = width / height;\n\n  let drawWidth = width;\n  let drawHeight = height;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  // 计算绘制尺寸和偏移量，保持宽高比\n  if (targetRatio > imgRatio) {\n    // 目标区域更宽，需要裁剪高度\n    drawHeight = (width / img.width) * img.height;\n    offsetY = (height - drawHeight) / 2;\n  } else {\n    // 目标区域更高，需要裁剪宽度\n    drawWidth = (height / img.height) * img.width;\n    offsetX = (width - drawWidth) / 2;\n  }\n\n  ctx.drawImage(img, x + offsetX, y + offsetY, drawWidth, drawHeight);\n}\n\n/**\n * 绘制图片并保持宽高比完整显示在目标区域内（类似CSS的background-size: contain）\n * 图片完整显示，但可能会有空白区域\n */\nfunction drawImageContain(\n  ctx: CanvasRenderingContext2D,\n  img: ImageBitmap,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n): void {\n  const imgRatio = img.width / img.height;\n  const targetRatio = width / height;\n\n  let drawWidth = width;\n  let drawHeight = height;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  // 计算绘制尺寸和偏移量，保持宽高比\n  if (targetRatio < imgRatio) {\n    // 目标区域更窄，宽度撑满，高度等比缩放\n    drawHeight = (width / img.width) * img.height;\n    offsetY = (height - drawHeight) / 2;\n  } else {\n    // 目标区域更宽，高度撑满，宽度等比缩放\n    drawWidth = (height / img.height) * img.width;\n    offsetX = (width - drawWidth) / 2;\n  }\n\n  ctx.drawImage(img, x + offsetX, y + offsetY, drawWidth, drawHeight);\n}\n"],"names":["CTRL_KEYS","createEl","tagName","createCtrlsGetter","cvsEl","ctrlSize","cvsResizeOb","entries","fisrtEntry","rectCtrlsGetter","rect","w","sz","hfSz","hfW","hfH","rtSz","hfRtSz","Rect","ESpriteManagerEvt","SpriteManager","__privateAdd","_sprites","_activeSprite","_evtTool","EventTool","__publicField","__privateGet","_renderTime","s","__privateSet","vs","a","b","props","spr","filter","time","as","renderCtrls","container","sprMng","cvsRatio","observer","syncCtrlElPos","rectEl","ctrlsEl","lastActSprEvtClear","createRectAndCtrlEl","offSprChange","k","d","x","y","h","angle","activeSprite","onCvsMouseDown","evt","offsetX","offsetY","ofx","ofy","ctrlKey","draggabelSprite","startX","startY","startRect","refline","createRefline","hitSpr","clientX","clientY","hitRectCtrls","onMouseMove","clearWindowEvt","expectX","expectY","updateRectWithSafeMargin","scaleRect","sprRect","deltaX","deltaY","scaler","stretchScale","fixedRatioScale","diagonalAngle","incW","incH","incS","rotateAngle","minSize","newW","newH","newIncW","newIncH","newIncS","startS","minS","newX","newY","newCenterX","newCenterY","coefficient","rotateRect","cntMap2Outer","outCnt","onMove","clear","cnt","left","top","value","newState","safeWidth","safeHeight","reflineBaseCSS","baseSettings","reflineSettings","lineWrap","reflineEls","key","lineEl","magneticDistance","retVal","reflineKey","correctionState","prop","val","refVal","el","dynamicCusor","cvsStyle","actSpr","isMSDown","onDown","onWindowUp","curStyles","curInitIdx","oa","idx","DEFAULT_AUDIO_CONF","createInitCvsEl","resolution","AVCanvas","attchEl","opts","_AVCanvas_instances","_cvsEl","_spriteManager","_cvsCtx","_destroyed","_clears","_stopRender","_opts","_backgroundOptions","_backgroundImage","_originalBackgroundImage","_audioCtx","_captureAudioDest","_playingAudioCache","_playState","_sprMapAudioNode","Log","clip","MediaStreamClip","audioNode","_a","ctx","createEmptyOscillatorNode","ctrlGetterDestroy","lastRenderTime","start","runCnt","expectFrameTime","workerTimer","width","height","mode","opacity","drawImageCover","drawImageContain","pattern","__privateMethod","render_fn","spriteTimes","end","updateRenderTime_fn","offset","duration","selfOffset","pause_fn","fn","ms","t","com","Combinator","sprites","os","OffscreenSprite","image","options","originalImage","blob","offscreenCanvas","offscreenCtx","emitPaused","asn","cvsCtx","ts","step","audioPlayAt","ctxDestAudioData","audio","curAudioTime","audioSourceArr","convertPCM2AudioSource","addTime","ads","pcmData","asArr","chan0Buf","chan1Buf","buf","audioSource","osc","real","imag","wave","img","imgRatio","targetRatio","drawWidth","drawHeight"],"mappings":"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"}